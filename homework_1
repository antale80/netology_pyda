{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 1**. Даны 2 строки: *long_phrase* и *short_phrase*. \n",
    "Напишите код, который проверяет действительно ли длинная фраза *long_phrase* длиннее короткой *short_phrase*. И выводит *True* или *False* в зависимости от результата сравнения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "long_phrase = 'Насколько проще было бы писать программы, если бы не заказчики'\n",
    "short_phrase = '640Кб должно хватить для любых задач. Билл Гейтс (по легенде)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len('Насколько проще было бы писать программы, если бы не заказчики') > len('640Кб должно хватить для любых задач. Билл Гейтс (по легенде)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 2**. Дано значение объема файла в байтах. Напишите перевод этого значения в мегабайты в формате: \"*Объем файла равен 213.68Mb*\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите размер файла (в байтах или мегабайтах: 14963986135\n",
      "Вы указали байты (b) или мегабайты (М)?: b\n",
      "Объем файла равен\n",
      "14963986135 байт = 14270.77Мб\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Введите размер файла (в байтах или мегабайтах): \"))\n",
    "c = input(\"Вы указали байты (b) или мегабайты (М)?: \")\n",
    "print (\"Объем файла равен\")\n",
    "if c == 'M':\n",
    "    print(\"%dМб = %d байт\" % (n, n*1024*1024))\n",
    "elif c == 'b':\n",
    "    print(\"%d байт = %.2fМб\" % (n, n/1024/1024))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 3**. Разработать приложение для определения знака зодиака по дате рождения. Пример:\n",
    "\n",
    "Введите месяц: март\n",
    "\n",
    "Введите число: 6\n",
    "\n",
    "Вывод:\n",
    "Рыбы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Определите свой знак Зодиака. Введите месяц рождения: июль\n",
      "Введите дату (число) рождения: 19\n",
      "Рак\n"
     ]
    }
   ],
   "source": [
    "month = input('Определите свой знак Зодиака. Введите месяц рождения: ')\n",
    "date = int(input('Введите дату (число) рождения: '))\n",
    "           \n",
    "if month == 'январь':\n",
    "           if 1<date<=20: print('Козерог')\n",
    "           elif 21<date<=31: print('Водолей')\n",
    "elif month == 'февраль':\n",
    "           if 1<date<=18: print('Водолей')\n",
    "           elif 19<date<=29: print('Рыбы')\n",
    "elif month == 'март':\n",
    "           if 1<date<=20: print('Рыбы')\n",
    "           elif 21<date<=31: print('Овен')\n",
    "elif month == 'апрель':\n",
    "           if 1<date<=20: print('Овен')\n",
    "           elif 21<date<=30: print('Телец')\n",
    "elif month == 'май':\n",
    "           if 1<date<=21: print('Телец')\n",
    "           elif 22<date<=31: print('Близнецы')\n",
    "elif month == 'июнь':\n",
    "           if 1<date<=21: print('Близнецы')\n",
    "           elif 22<date<=30: print('Рак')\n",
    "elif month == 'июль':\n",
    "           if 1<date<=22: print('Рак')\n",
    "           elif 23<date<=31: print('Лев')\n",
    "elif month == 'август':\n",
    "           if 1<date<=23: print('Лев')\n",
    "           elif 24<date<=31: print('Дева')\n",
    "elif month == 'сентябрь':\n",
    "           if 1<date<=22: print('Дева')\n",
    "           elif 23<date<=30: print('Весы')\n",
    "elif month == 'октябрь':\n",
    "           if 1<date<=23: print('Весы')\n",
    "           elif 23<date<=31: print('Скорпион')\n",
    "elif month == 'ноябрь':\n",
    "           if 1<date<=22: print('Скорпион')\n",
    "           elif 23<date<=30: print('Стрелец')\n",
    "elif month == 'декабрь':\n",
    "           if 1<date<=21: print('Стрелец')\n",
    "           elif 22<date<=31: print('Козерог')\n",
    "else: print('Ошибка ввода')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* (дополнительно) Определитель года животного по Восточному календарю "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите год рождения = 2014\n",
      "Лошадь\n"
     ]
    }
   ],
   "source": [
    "gor = {\n",
    "    0: 'Крыса',\n",
    "    1: 'Бык',\n",
    "    2: 'Тигр',\n",
    "    3: 'Кролик',\n",
    "    4: 'Дракон',\n",
    "    5: 'Змея',\n",
    "    6: 'Лошадь',\n",
    "    7: 'Коза',\n",
    "    8: 'Обезьяна',\n",
    "    9: 'Петух',\n",
    "    10: 'Собака',\n",
    "    11: 'Свинья',\n",
    "}\n",
    "print(gor[(int(input('Введите год рождения = ')) - 2008) % 12])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 4**. Нужно разработать приложение для финансового планирования.\n",
    "Приложение учитывает сколько уходит на ипотеку, \"на жизнь\" и сколько нужно отложить на пенсию.\n",
    "Пользователь вводит:\n",
    "- заработанную плату в месяц.\n",
    "- сколько процентов от ЗП уходит на ипотеку.\n",
    "- сколько процентов от ЗП уходит \"на жизнь\".\n",
    "- сколько раз приходит премия в год.\n",
    "\n",
    "Остальная часть заработанной платы откладывается на пенсию.\n",
    "\n",
    "Также пользователю приходит премия в размере зарплаты, от которой половина уходит на отпуск, а вторая половина откладывается.\n",
    "\n",
    "Программа должна учитывать сколько премий было в год.\n",
    "\n",
    "Нужно вывести сколько денег тратит пользователь на ипотеку и сколько он накопит за год.\n",
    "\n",
    "Пример:\n",
    "\n",
    "Введите заработанную плату в месяц: 100000\n",
    "\n",
    "Введите сколько процентов уходит на ипотеку: 30\n",
    "\n",
    "Введите сколько процентов уходит на жизнь: 50\n",
    "\n",
    "Введите количество премий за год: 2\n",
    "\n",
    "Вывод:\n",
    "На ипотеку было потрачено: 360000 рублей\n",
    "Было накоплено: 340000 рублей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите заработанную плату в месяц: 100000\n",
      "Введите сколько процентов уходит на ипотеку: 30\n",
      "Введите сколько процентов уходит на жизнь: 50\n",
      "Введите количество премий за год: 2\n",
      "На ипотеку было потрачено:  360000.0\n",
      "Было накоплено:  340000.0\n"
     ]
    }
   ],
   "source": [
    "salary = int(input('Введите заработанную плату в месяц: '))\n",
    "loan = int(input('Введите сколько процентов уходит на ипотеку: '))\n",
    "living = int(input('Введите сколько процентов уходит на жизнь: '))\n",
    "bonus = int(input('Введите количество премий за год: '))\n",
    "           \n",
    "if salary == 0:\n",
    "           print ('Вы ничего не накопите!')\n",
    "else:\n",
    "    print ('На ипотеку было потрачено: ', (salary * loan) / 100 * 12)\n",
    "    print ('Было накоплено: ', (salary * 12 - salary * (loan + living) / 100 * 12 + (salary * bonus)/2))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
